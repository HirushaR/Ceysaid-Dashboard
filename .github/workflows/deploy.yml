name: Deploy to AWS Elastic Beanstalk

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  EB_APPLICATION_NAME: ${{ secrets.EB_APPLICATION_NAME }}
  EB_ENVIRONMENT_NAME: ${{ secrets.EB_ENVIRONMENT_NAME }}
  AWS_REGION: ${{ secrets.AWS_REGION }}

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        extensions: mbstring, xml, ctype, iconv, intl, pdo_sqlite, dom, filter, gd, iconv, json, mbstring, pdo, phar, tokenizer, xml, xmlreader, xmlwriter, zip, curl, fileinfo, openssl, pcntl, posix, readline, shmop, sockets, sysvmsg, sysvsem, sysvshm, wddx, xmlrpc, xsl, zend opcache, bcmath, calendar, exif, ffi, ftp, gettext, gmp, imap, ldap, mysqli, odbc, pdo_dblib, pdo_firebird, pdo_ibm, pdo_mysql, pdo_oci, pdo_odbc, pdo_pgsql, pdo_sqlite, pgsql, shmop, snmp, soap, sockets, sysvmsg, sysvsem, sysvshm, tidy, xsl, zend opcache
        coverage: none
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install Composer dependencies
      run: composer install --prefer-dist --no-interaction
        
    - name: Install NPM dependencies
      run: npm ci
      
    - name: Build assets
      run: npm run build
      
    - name: Run tests
      run: |
        cp .env.example .env
        php artisan key:generate
        php artisan test

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        composer install --prefer-dist --no-interaction --no-dev --optimize-autoloader
        npm ci
        
    - name: Build assets
      run: npm run build
      
    - name: Create deployment package
      run: |
        mkdir -p deploy
        rsync -av --progress . deploy/ \
          --exclude=node_modules \
          --exclude=.git \
          --exclude=vendor \
          --exclude=.env \
          --exclude=.env.* \
          --exclude=storage/logs \
          --exclude=storage/framework/cache \
          --exclude=storage/framework/sessions \
          --exclude=storage/framework/views \
          --exclude=tests \
          --exclude=.phpunit.result.cache \
          --exclude=deploy \
          --exclude=.github
        
        cp -r .ebextensions deploy/
        cp -r .platform deploy/
        
        cat > deploy/.env << EOF
        APP_NAME="Ceysaid CRM"
        APP_ENV=production
        APP_KEY=
        APP_DEBUG=false
        APP_TIMEZONE=UTC
        APP_URL=
        
        LOG_CHANNEL=errorlog
        LOG_DEPRECATIONS_CHANNEL=null
        LOG_LEVEL=error
        
        DB_CONNECTION=mysql
        DB_HOST=
        DB_PORT=3306
        DB_DATABASE=
        DB_USERNAME=
        DB_PASSWORD=
        
        CACHE_STORE=file
        FILESYSTEM_DISK=s3
        SESSION_DRIVER=file
        SESSION_LIFETIME=120
        
        AWS_ACCESS_KEY_ID=
        AWS_SECRET_ACCESS_KEY=
        AWS_DEFAULT_REGION=${{ secrets.AWS_REGION }}
        AWS_BUCKET=
        AWS_URL=
        
        MAIL_MAILER=log
        EOF
        
        cd deploy
        zip -r ../deployment.zip .
        cd ..
        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
        
    - name: Deploy to Elastic Beanstalk
      run: |
        VERSION_LABEL="v$(date +%Y%m%d-%H%M%S)"
        
        aws s3 cp deployment.zip s3://elasticbeanstalk-$AWS_REGION-$AWS_ACCOUNT_ID/
        
        aws elasticbeanstalk create-application-version \
          --application-name $EB_APPLICATION_NAME \
          --version-label $VERSION_LABEL \
          --source-bundle S3Bucket="elasticbeanstalk-$AWS_REGION-$AWS_ACCOUNT_ID",S3Key="deployment.zip"
        
        aws elasticbeanstalk update-environment \
          --environment-name $EB_ENVIRONMENT_NAME \
          --version-label $VERSION_LABEL
          
    - name: Wait for deployment
      run: |
        echo "Waiting for deployment to complete..."
        aws elasticbeanstalk wait environment-updated \
          --environment-names $EB_ENVIRONMENT_NAME
        
    - name: Get deployment URL
      run: |
        EB_URL=$(aws elasticbeanstalk describe-environments \
          --environment-names $EB_ENVIRONMENT_NAME \
          --query 'Environments[0].CNAME' \
          --output text)
        echo "Deployment URL: http://$EB_URL"
        echo "EB_URL=$EB_URL" >> $GITHUB_ENV
        
    - name: Health check
      run: |
        sleep 30
        curl -f http://$EB_URL || exit 1 